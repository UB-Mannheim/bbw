{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"bbw docs bbw is a semantic annotator \" b oosted b y w iki\" for linking tabular data without metadata to a Wikibase instance (e.g., Wikidata ) via contextual matching and meta-lookup (metasearch). Annotates tabular data with the entities, types and properties in Wikidata . Easy to use: bbw.annotate() . Resolves even tricky spelling mistakes via meta-lookup through the SearX metasearch engine. Matches to the up-to-date values in Wikidata without the dump files. Ranked in third place at SemTab2020 . Installation You can use pip to install bbw : pip install bbw The latest version can be installed directly from github: pip install git+https://github.com/UB-Mannheim/bbw Install also SearX , because bbw meta-lookups through it. export PORT=80 docker pull searx/searx docker run --rm -d -v ${PWD}/searx:/etc/searx -p $PORT:8080 -e BASE_URL=http://localhost:$PORT/ searx/searx SearX is running on http://localhost:80. bbw sends GET requests to it.","title":"Home"},{"location":"#bbw-docs","text":"bbw is a semantic annotator \" b oosted b y w iki\" for linking tabular data without metadata to a Wikibase instance (e.g., Wikidata ) via contextual matching and meta-lookup (metasearch). Annotates tabular data with the entities, types and properties in Wikidata . Easy to use: bbw.annotate() . Resolves even tricky spelling mistakes via meta-lookup through the SearX metasearch engine. Matches to the up-to-date values in Wikidata without the dump files. Ranked in third place at SemTab2020 .","title":"bbw docs"},{"location":"#installation","text":"You can use pip to install bbw : pip install bbw The latest version can be installed directly from github: pip install git+https://github.com/UB-Mannheim/bbw Install also SearX , because bbw meta-lookups through it. export PORT=80 docker pull searx/searx docker run --rm -d -v ${PWD}/searx:/etc/searx -p $PORT:8080 -e BASE_URL=http://localhost:$PORT/ searx/searx SearX is running on http://localhost:80. bbw sends GET requests to it.","title":"Installation"},{"location":"quickstart/","text":"Quickstart Before you install bbw , check our short tutorial in binder: Basic usage of the main functions To test the main functions, import bbw in Python: from bbw import bbw annotate() The easiest way to annotate the dataframe Y=bbw.pd.DataFrame([['0','1'],['Mannheim','Rhine']]) is: [web_table, url_table, label_table, cpa, cea, cta] = bbw.annotate(Y) It returns a list of six dataframes. The first three dataframes contain the annotations in the form of HTML-links, URLs and labels of the entities in Wikidata correspondingly. The dataframes have two more rows than Y. These two rows contain the annotations for types and properties. The last three dataframes contain the annotations in the format required by SemTab2020 challenge. preprocessing(), contextual_matching() & postprocessing() The fastest way to annotate the dataframe Y is: [cpa_list, cea_list, nomatch] = bbw.contextual_matching(bbw.preprocessing(Y)) [cpa, cea, cta] = bbw.postprocessing(cpa_list, cea_list) The dataframes cpa , cea and cta contain the annotations in SemTab2020 -format. The list nomatch contains the labels which are not matched. The unprocessed and possibly non-unique annotations are in the lists cpa_list and cea_list . GUI (graphical user interface) If you need to annotate only one table, use the simple GUI: streamlit run bbw_gui.py Open the browser at http://localhost:8501 and choose a CSV-file. The annotation process starts automatically. It outputs the six tables of the annotate function. You can test GUI (without SearX support) at: CLI (command line tool) If you need to annotate a few tables, use the CLI-tool: python3 bbw_cli.py --amount 100 --offset 0 Fast annotations with GNU parallel If you need to annotate hundreds or thousands of tables, use the script with GNU parallel: ./bbw_parallel.py","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"Before you install bbw , check our short tutorial in binder:","title":"Quickstart"},{"location":"quickstart/#basic-usage-of-the-main-functions","text":"To test the main functions, import bbw in Python: from bbw import bbw","title":"Basic usage of the main functions"},{"location":"quickstart/#annotate","text":"The easiest way to annotate the dataframe Y=bbw.pd.DataFrame([['0','1'],['Mannheim','Rhine']]) is: [web_table, url_table, label_table, cpa, cea, cta] = bbw.annotate(Y) It returns a list of six dataframes. The first three dataframes contain the annotations in the form of HTML-links, URLs and labels of the entities in Wikidata correspondingly. The dataframes have two more rows than Y. These two rows contain the annotations for types and properties. The last three dataframes contain the annotations in the format required by SemTab2020 challenge.","title":"annotate()"},{"location":"quickstart/#preprocessing-contextual_matching-postprocessing","text":"The fastest way to annotate the dataframe Y is: [cpa_list, cea_list, nomatch] = bbw.contextual_matching(bbw.preprocessing(Y)) [cpa, cea, cta] = bbw.postprocessing(cpa_list, cea_list) The dataframes cpa , cea and cta contain the annotations in SemTab2020 -format. The list nomatch contains the labels which are not matched. The unprocessed and possibly non-unique annotations are in the lists cpa_list and cea_list .","title":"preprocessing(), contextual_matching() &amp; postprocessing()"},{"location":"quickstart/#gui-graphical-user-interface","text":"If you need to annotate only one table, use the simple GUI: streamlit run bbw_gui.py Open the browser at http://localhost:8501 and choose a CSV-file. The annotation process starts automatically. It outputs the six tables of the annotate function. You can test GUI (without SearX support) at:","title":"GUI (graphical user interface)"},{"location":"quickstart/#cli-command-line-tool","text":"If you need to annotate a few tables, use the CLI-tool: python3 bbw_cli.py --amount 100 --offset 0","title":"CLI (command line tool)"},{"location":"quickstart/#fast-annotations-with-gnu-parallel","text":"If you need to annotate hundreds or thousands of tables, use the script with GNU parallel: ./bbw_parallel.py","title":"Fast annotations with GNU parallel"}]}